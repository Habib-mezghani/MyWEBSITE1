[{"authors":["admin"],"categories":null,"content":"My name is Habib MEZGHANI, I am an energy efficiency engineer, with advanced Python programming skills. I enjoy modelling thermal and hydronic problems and solving thermal dynamincs simulation and CFD (computional fluid dynamics) equations.\nI worked in many valuable projects involving data science in Energy Commitment and Estimation field. Add to that, I have a great experience about the HVAC systems in Data centers.\nI’m interested in how artificial intellegence can applied to control and automate the HVAC systems via the Building Management System, in order to render the concept of smart building more valuable.\nI am a flexible, self-motivated, team worker eager to earn a valuable work experience in an international environment.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://habib-mezghani.github.io/MyWEBSITE/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/MyWEBSITE/authors/admin/","section":"authors","summary":"My name is Habib MEZGHANI, I am an energy efficiency engineer, with advanced Python programming skills. I enjoy modelling thermal and hydronic problems and solving thermal dynamincs simulation and CFD (computional fluid dynamics) equations.\nI worked in many valuable projects involving data science in Energy Commitment and Estimation field. Add to that, I have a great experience about the HVAC systems in Data centers.\nI’m interested in how artificial intellegence can applied to control and automate the HVAC systems via the Building Management System, in order to render the concept of smart building more valuable.","tags":null,"title":"Habib MEZGHANI","type":"authors"},{"authors":null,"categories":null,"content":"Weather file is considered as the basic input for energy modelling engineer, it presents a dataset of one year for the different Physical size. Energy model calibration often uses actual measured weather data, hence, in order to have energy model that mimics the actual energy and thermal behavior of the studied building, the weather file used in the simulation have to be modified according to the recorded and the real data.\nAn EPW file (EnergyPlus weather file) can be divided into two parts: header and weather data. The first eight lines of a standard EPW file present the header which contains data of location, design conditions, typical/extreme periods, ground temperatures, holidays/daylight savings, data periods and other comments. The second part presents the hourly data, the main columns of the data set are detailed here.\nPyepw is python package that provides the flexibility to read visualize or, replace the core weather data. The installation can be done by the simple command on the cmd pip install pyepw. the Python notebook used in the following can be downloaded from this Github link In order to read the weather file first of all, we must create an instance of the class EPW() and apply the read function with the name of the weather file (with the directory location) as input.\nfrom pyepw.epw import EPW epw = EPW() epw.read(r\u0026quot;downloadFile.epw\u0026quot;) # weather file of Bordeaux in France  The description related to the weather file location, can be accessed by these lines, note that location is another class presented as field of the EWP() class.\nprint(epw.location.country) print(epw.location.latitude) print(epw.location.longitude) print(epw.location.elevation)  In order to read the hourly data of the dry temperature or the dew temperature, we must iterate over the class weatherdata which are the fields of the created EWP class and access to the field dry_bulb_temperature, dew_point_temperature.\nfor wd in epw.weatherdata: print (wd.dry_bulb_temperature, ' ', wd.dew_point_temperature)  To change and save the weather file from recorded data, we must change each field of the epw.weatherdata class. In the following example, let’s assume that we have the recorded data of the dry temperature the relative humidity and the wind speed, these data are presented as lists of random value (just for demonstration)\nimport random Temp_data=[round(random.uniform(-5,50), 2) for i in range(8760)] #generate new data for temperature Humidity_data=[round(random.uniform(5,100), 2) for i in range(8760)] #generate new data for relative humidity wind_data=[round(random.uniform(0,15), 2) for i in range(8760)] #generate new data for wind speed i=0 for wd in epw.weatherdata: wd.dry_bulb_temperature = Temp_data[i] wd.relative_humidity =Humidity_data[i] wd.wind_speed =wind_data[i] i=i+1 epw.save(r\u0026quot;new_file.epw\u0026quot;)  Let’s try to construct a data frame by using the weather file, we can use dummies lists to store the data of each iteration over the epw.weatherdata fields and next can we create a Pandas DataFrame from these lists.\ndef Create_df_weather(): #read_ewp_as_link(Link_weather) epw = EPW() epw.read(r\u0026quot;downloadFile.epw\u0026quot;) #print(epw.location.country) #lat = epw.location.latitude #print(epw.location.longitude) #print(epw.location.elevation) year = [] month = [] day = [] date=[] hour = [] seconde = [] dry_bulb_temperature = [] dew_point_temperature = [] relative_humidity = [] atmospheric_station_pressure = [] global_horizontal_radiation = [] direct_normal_radiation = [] diffuse_horizontal_radiation = [] wind_direction = [] wind_speed = [] total_sky_cover = [] opaque_sky_cover = [] precipitable_water = [] for wd in epw.weatherdata: year.append(wd.year) month.append(wd.month) day.append(wd.day) hour.append(wd.hour) dry_bulb_temperature.append(wd.dry_bulb_temperature) dew_point_temperature.append(wd.dew_point_temperature) relative_humidity.append(wd.relative_humidity) atmospheric_station_pressure.append(wd.atmospheric_station_pressure) global_horizontal_radiation.append(wd.global_horizontal_radiation) direct_normal_radiation.append(wd.direct_normal_radiation) diffuse_horizontal_radiation.append(wd.global_horizontal_radiation) wind_direction.append(wd.wind_direction) wind_speed.append(wd.wind_speed) total_sky_cover.append(wd.total_sky_cover) opaque_sky_cover.append(wd.opaque_sky_cover) precipitable_water.append(wd.precipitable_water) data_weather = pd.DataFrame( [year, month, day, hour, dry_bulb_temperature, dew_point_temperature, relative_humidity, atmospheric_station_pressure, global_horizontal_radiation, direct_normal_radiation, diffuse_horizontal_radiation, wind_direction, wind_speed, total_sky_cover, opaque_sky_cover, precipitable_water]) data_weather = data_weather.transpose() data_weather.columns = ['year', 'month', 'day', 'hour', 'dry_bulb_temperature', 'dew_point_temperature', 'relative_humidity', 'atmospheric_station_pressure', 'global_horizontal_radiation', 'direct_normal_radiation', 'diffuse_horizontal_radiation', 'wind_direction', 'wind_speed', 'total_sky_cover', 'opaque_sky_cover', 'precipitable_water'] return data_weather df=Create_df_weather() df.head()  Once we have the dataframe, You can plot data directly from your DataFrame using the plot() method which is function as part of the Pandas DataFrame class\nploting the dry and the dew temperature\ndf[['dew_point_temperature','dry_bulb_temperature']].plot(figsize=(15,5))  Presenting the monthly data of the solar radiation\ndf_month=df.groupby(['month']).sum()[['global_horizontal_radiation','direct_normal_radiation','diffuse_horizontal_radiation']]/1000 df_month.plot(kind='bar',figsize=(15,5))  Presenting the main statistical value of the dry temperature (min, max, mean) (by month)\ndf1=df.groupby(['month']).max()[['dry_bulb_temperature']] df2=df.groupby(['month']).mean()[['dry_bulb_temperature']] df3=df.groupby(['month']).min()[['dry_bulb_temperature']] ax = plt.gca() df1.plot(figsize=(15,5),ax=ax,style='.-') df2.plot(figsize=(15,5),ax=ax,style='.-') df3.plot(figsize=(15,5),ax=ax,style='.-')  ","date":1562277600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562277600,"objectID":"e6bcb13e5db1578bb50758a9da06d29b","permalink":"https://habib-mezghani.github.io/MyWEBSITE/project/how-to-consult-epw-file-with-python/","publishdate":"2019-07-05T00:00:00+02:00","relpermalink":"/MyWEBSITE/project/how-to-consult-epw-file-with-python/","section":"project","summary":"This article presents an example of using Python to read and modify weather file ...","tags":["Python","EPW"],"title":"How to consult EPW file with Python","type":"project"},{"authors":null,"categories":null,"content":"EnergyPlus is the US Department of Energy’s flagship program for building energy modeling. Developed by a team of researchers, engineers, it is freely available under an open source license at this website\nThe EnergyPlus program models heating, cooling, lighting, ventilation, other energy flows, by using a collection of many program modules that work together to calculate the energy required for heating and cooling a building using a variety of systems and energy sources. It does this by simulating the building and associated energy systems when they are exposed to different environmental and operating conditions. The core of the simulation is a model of the building that is based on fundamental heat balance principles. In the following, we focus on how we can extract energy Plus model from design builder and run it using python in customized approach with Energy plus core engine. The Notebook used is available on this link on Github\nExporting IDF Files\n Open your DesignBuilder dsb model file (let’s take the Atrium model proposed by design builder). Click on the File \u0026gt; Export \u0026gt; Export EnergyPlus or DBSim input file \u0026gt; Simulation menu option. Open the file with text editor in order to check the Energy Plus version, note that the energy plus version is that is embedded in design builder  Download Energy Plus and IDF conversion\nThe next step is to download the desired energy plus engine from this link, let’s assume that the energy plus Engine downloaded and installed is the v8.9.0 The next step is to convert you IDF file from the 8.6 version to the 8.9 version, in order to be compatible with the installed Energy plus Engine.\nTo do that:\n1-Navigate to IDFVersionUpdated which is located at C:\\EnergyPlusV8-9-0\\PreProcess\\IDFVersionUpdater (if we assume that the energy plus was installed at the C:\\ folder)\n2- Click on Choose File to update and browse to the IDF file and choose the new version as 8.9.0 3-Once the conversion process is finished, a new IDF file is created Installing and using EPPY (Python Package)\nEppy is a scripting language for EnergyPlus idf files, and EnergyPlus output files. Eppy is written in the programming language Python. As a result it takes full advantage of the rich data structure and idioms that are avaliable in python. You can programmatically navigate, search, and modify EnergyPlus idf files using eppy. The power of using a scripting language allows you to do the following:\n Make a large number of changes in an idf file with a few lines of eppy code. Use conditions and filters when making changes to an idf file Make changes to multiple idf files. Read data from the output files of an E+ simulation run. Based to the results of an E+ simulation run, generate the input file for the next simulation run.  To install Eppy package, run in your cmd window pip install eppy\nIn order to use this python package, we need essentially 3 files:\n1- The IDF file as done above.\n2- The IDD file is located in the folder of the Energy Plus\n3- The EPW file is the weather file used for the simulation\nWe propose to put each file in a folder\nFirst of all, let’s create an IDF class using the package:\nfrom eppy import modeleditor from eppy.modeleditor import IDF iddfile = \u0026quot;Example\\Resources\\iddfiles\\Energy+.idd\u0026quot; fname1 = \u0026quot;Example\\Resources\\idffiles\\Model_Design_builder.idf\u0026quot; Weather= \u0026quot;Example\\Resources\\WeatherDATA\\FRA_Paris.epw\u0026quot; IDF.setiddname(iddfile) idf1 = IDF(fname1,Weather) idf1.printidf()  The IDF class is constructed with different objects, we can iterate over the IDF class in order to Know name of the different objects.\nfor x in idf1.idfobjects: print (x)  Among these objects, the most important that can be modified during energy simulation studies are:\n idf1.idfobjects[\u0026lsquo;LIGHTS\u0026rsquo;] in order to control the light load in each zone. idf1.idfobjects[\u0026lsquo;PEOPLE\u0026rsquo;] in order to control the people load in each zone. idf1.idfobjects[\u0026lsquo;ELECTRICEQUIPMENT\u0026rsquo;] in order to control the equipment load in each zone. idf1.idfobjects[\u0026lsquo;ZONEINFILTRATION:DESIGNFLOWRATE\u0026rsquo;] in order to control the infiltration rate in each zone. idf1.idfobjects[\u0026ldquo;MATERIAL\u0026rdquo;] in order to control the defined material. idf1.idfobjects[\u0026ldquo;CONSTRUCTION\u0026rdquo;] in order to control the layer used to construct each wall on the building. idf1.idfobjects[\u0026ldquo;WINDOWMATERIAL:GLAZING\u0026rdquo;] in order to control the proprieties of the glazed material used. idf1.idfobjects[\u0026lsquo;BUILDINGSURFACE:DETAILED\u0026rsquo;] in order to control coordinate and the assigned material for each wall.  Modify the IDF file\nLet’s assume that we want that:\n The density of people equals 5 peoples in each zone. The density of light equals 6W/m². +The thickness of the concrete material equal 0.25 m.\npeoples=idf1.idfobjects['PEOPLE'] for people in peoples: people.Number_of_People_Calculation_Method='People' people.Number_of_People=5 print (idf1.idfobjects['PEOPLE'])  LIGHTS=idf1.idfobjects['LIGHTS'] for LIGHT in LIGHTS: LIGHT.Design_Level_Calculation_Method='Watts/Area' LIGHT.Watts_per_Zone_Floor_Area=6 print (idf1.idfobjects['LIGHTS'])   for material in idf1.idfobjects[\u0026quot;MATERIAL\u0026quot;]: if material.Name.find('Concrete')\u0026gt;0: material.Thickness=0.25  Run E+ simulation\nIn order to run a simulation with energy plus, we use only a simple command as EnergyPlus can be called on the cmd Windows.\nImport subprocess idf1.saveas(r\u0026quot;out.idf\u0026quot;) fname1 = \u0026quot;out.idf\u0026quot; subprocess.call(\u0026quot;C:\\EnergyPlusV8-9-0\\energyplus.exe -w \u0026quot;+Weather +\u0026quot; -r \u0026quot; +fname1, shell=True)  All the EnergyPlus output files are located in the folder\n","date":1558908000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558908000,"objectID":"7fa50bf1ee3bfbd6677cf2755eed9c46","permalink":"https://habib-mezghani.github.io/MyWEBSITE/project/energy-plus-with-python/","publishdate":"2019-05-27T00:00:00+02:00","relpermalink":"/MyWEBSITE/project/energy-plus-with-python/","section":"project","summary":"This article presents an example of using Python to run E+ simulations ...","tags":["EnergyPlus","Python"],"title":"EnergyPlus with Python","type":"project"},{"authors":null,"categories":null,"content":"Weather file is considered as the basic input for energy modelling engineer, it represents 1 year of hourly (8760) weather data values, this data set are commonly used by energy engineers for modelling renewable energy systems and assess the building heating and cooling needs, as it provides a typical description of the main physical properties as the temperature, the humidity, solar radiation, wind speed… for the concerned region.\nThe Energy Plus weather file is commonly used by engineer as it is provided by Energy plus, easy to download and suitable for almost energy simulation softwares.\nIn this article we will try to build a python application that allow as to download the energy plus weather file without accessing to energy Plus website. the python code can be downloaded from this link\nWe can notice that in EnergyPlus website there is cartography presenting the locations where the EnergyPlus weather files are available. The list of these locations can be downloaded as json format from this link NREL Github. If we open this file with Notepad, we notice that each point/location is presented by these lines which is repeated every 15 lines.\nMoreover, in the file name, we notice that it is divided in 2 parts which are the country code with three letters and the city name, for example \u0026ldquo;FRA_Paris.Orly.071490_IWEC\u0026rdquo; the FRA is the country code for France and Paris.Orly is the name of the city (location). First of all, we can easily read this file line by line with python\nimport os import pandas as pd import re filename = \u0026quot;master.geojson.txt\u0026quot; with open(filename) as f: line = f.readlines()  We began with the first city, we can access to the country code and the city name by some split functions =\u0026gt; the output is IND_Kota\nline[9].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][2:-3].split(\u0026quot;.\u0026quot;)[0] \u0026gt;\u0026gt; IND_Kota  With the same methodology we can extract the EWP URL file and the (X,Y) coordinates.\nEwp_URL='https://'+line[9].split(\u0026quot;:\u0026quot;)[2][2:-29] X_coor=float(line[15].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][1:][1:-1].split(\u0026quot;,\u0026quot;)[0]) Y_coor float(line[15].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][1:][1:-1].split(\u0026quot;,\u0026quot;)[1])  With an iterative loop through all the line of the file we can append for each location the information concerning: the country ID, the city name, the EPW download URl, X_coordinate and the Y_coordinate, and store this information as data frame\nimport os import pandas as pd import re filename = \u0026quot;master.geojson.txt\u0026quot; with open(filename) as f: line = f.readlines() # Show the file contents line by line. Country=[] city=[] ewp=[] X=[] Y=[] i=8 # first line for the city and country name j=9 # first line for the EPW file k=15 # first line for the X_coord and Y_coord while i\u0026lt;len(line): a=line[i].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][2:-3].split(\u0026quot;.\u0026quot;)[0].split(\u0026quot;_\u0026quot;) if len(a)\u0026gt;2: a[1]=a[1]+\u0026quot; \u0026quot;+a[2] a.remove(a[2]) if len(a)\u0026gt;1: Country.append(a[0]) city.append(a[1]) ewp.append('https://'+line[j].split(\u0026quot;:\u0026quot;)[2][2:-29]) X.append(float(line[k].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][1:][1:-1].split(\u0026quot;,\u0026quot;)[0])) Y.append(float(line[k].split(\u0026quot;:\u0026quot;)[1].split(\u0026quot;\\n\u0026quot;)[0][1:][1:-1].split(\u0026quot;,\u0026quot;)[1])) i=i+15 #next location j=j+15 #next location k=k+15 #next location data=pd.DataFrame({'Country':Country,'city':city, 'EWP':ewp,'coorX':X,'coordY':Y}) data.to_csv('EWP_data_base.csv', sep=';')  the exported data set is presented as bellow.\nIn order to add the full country name and the continent name, as first step we can download as csv file from this link a database that consists of list of countries by continent, and then, we merge this dataset with the data set extracted form the EnergyPlus data based on the country_id.\ncountry_data=pd.read_csv('country-and-continent-codes-list-csv_csv.csv',sep=',')[['Continent_Name','Country_Name','Three_Letter_Country_Code']] country_data.columns=['Continent_Name','Country_Name','Country_ID'] result = pd.merge(data_E_PLUS, country_data, on=['Country_ID']) result.to_csv('EWP_data_base.csv', sep=';')  Once we have this dataset that we can use dash which is python framework that allow to built web app.\nIn our case we use the widget map in order to present the different location referring to the X and Y coordinate, in addition, a conditioned selectors to choose the location based on the continent, the country and the chosen city. The full code can be downloaded from this link on Github and the output is similar to bellow. ","date":1550358000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550358000,"objectID":"7026cae2636210f279e180d7cdd2d18d","permalink":"https://habib-mezghani.github.io/MyWEBSITE/project/download-weather-file-with-python/","publishdate":"2019-02-17T00:00:00+01:00","relpermalink":"/MyWEBSITE/project/download-weather-file-with-python/","section":"project","summary":"This article presents an example of using Python to download Weather File ...","tags":["EPW","Energy Plus","Python"],"title":"Download Weather file with Python ","type":"project"},{"authors":null,"categories":null,"content":"In the context of the Energy Performance Contracting EPC, it is essential to be able to estimate reliably the energy consumption of the building during its cycle life. The implementation of EPC requires new and effective tools. One of these tools, absolutely essential, is the energy simulation software ( the following link presents full list of the used softwares). Indeed, such a tool can model the energy needs of the building and evaluate its consumption.\nFor an existing building, it allows to build improvement scenarios and to study actions to improve energy performance, and to put in place a guarantee of the actual performance\nIn the following, I present a summary of the strengths of some softwares, commonly used by engineers in France, and that I have already used it and tested it during my university studies and my professional experience.\n CLIMAWIN is multi-function software that allows you to combine calculation the thermal losses and loads with the ASHREA method, the thermal building regulations calculation RT2012 and energy consumption calculation, by using a common input variables. The load calculation method is based on the Radiant Time Series (RTS), and the thermal building regulations calculation are modeled according to the Th-BCE 2012 rules (algorithms developed by CSTB for the RT 2012), coded by BBS Slama. Compared to the RT calculation, the building energy module allows you to enter more customized and flexible information as the site or a weather file, occupancy schedules, equipment and lighting.\n DesignBuilder is based, since its creation, on the concept of BIM with the GBXML files and the philosophy of the heritage method for the input hypothesis variables, for instance all rooms that are created from the same block inherit the same input variables as the father block’s, hence, this method improve the engineer productivity, reduce the redundancy of the inputs information and allow a smooth evolution of the model at each phase of the project while retaining an easy ergonomics. Among the strengths of this software from my point view is the use of EnergyPlus calculation engine, which is a calculation engine developed by the DOE (US Department of Energy), which allows for a coupled simulation of the building and HVAC systems and natural and artificial lighting. The EnergyPlus program is a collection of many program modules that work together to calculate the energy required for heating and cooling a building using a variety of systems and energy sources. It does this by simulating the building and associated energy systems when they are exposed to different environmental and operating conditions.\n Comfie pléiades is a software for the design and, energy and environmental assessment of the building, developed by Izuba Energies. The PLEIADES MODELEUR, the graphical modeler, allows a quick input of the building envelope, its thermal characteristics, masks, systems and the scenario usage. The thermal calculation is based on the Comfie engine, which was developed by the Energy Efficiency Systems Center of the Ecole de Mines de Paris. The calculation of the natural lighting is based on the Radiance software. It is based on international recognized methods for building equipment sizing as the EN 12831 standard for heating, and the ASHRAE RTS (the Radiant Time Series) method for cooling and air conditioning. In 2016, Kolico, a start-up founded by 2 researchers from the Ecole des Mines de Paris, developed a specific software dedicated for Comfie Pléiades models allowing to automatize multiple calculations in order to ease the sensitivity analysis, uncertainty analysis, and the cost optimization.\n  ","date":1527372000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527372000,"objectID":"dc27c1fd2dbe9d1da08c6072b9d8268d","permalink":"https://habib-mezghani.github.io/MyWEBSITE/project/energy-performance-simulation/","publishdate":"2018-05-27T00:00:00+02:00","relpermalink":"/MyWEBSITE/project/energy-performance-simulation/","section":"project","summary":"This article presents some Energy modelling softwares ...","tags":["Energy Modelling","Energy software"],"title":"Energy performance simulation softwares","type":"project"}]